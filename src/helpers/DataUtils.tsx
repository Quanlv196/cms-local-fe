export default class TextUtils {
  /**
   * üß© Format d·ªØ li·ªáu ƒë·ªÉ g·ª≠i API
   * - N·∫øu object c√≥ { label, value, key } ‚Üí l·∫•y value
   * - N·∫øu object c√≥ { id, name } ‚Üí l·∫•y id
   * - C√°c object kh√°c ho·∫∑c ki·ªÉu d·ªØ li·ªáu c∆° b·∫£n ‚Üí gi·ªØ nguy√™n
   */
  static formatDataForAPI = (obj: Record<string, any>): Record<string, any> => {
    const newObj: Record<string, any> = {};

    for (const key in obj) {
      const value = obj[key];

      if (
        value &&
        typeof value === "object" &&
        !Array.isArray(value) &&
        !(value instanceof Date)
      ) {
        if ("label" in value && "value" in value && "key" in value) {
          newObj[key] = value.value;
        } else if ("id" in value && "name" in value) {
          newObj[key] = value.id;
        } else {
          newObj[key] = value;
        }
      } else {
        newObj[key] = value;
      }
    }

    return newObj;
  };

  /**
   * üîç Convert chu·ªói sang ki·ªÉu d·ªØ li·ªáu t∆∞∆°ng ·ª©ng
   * - "true"/"false" ‚Üí boolean
   * - "null"/"undefined" ‚Üí null/undefined
   * - Chu·ªói s·ªë ‚Üí number
   */
  static parseValue = (value: any): any => {
    if (value === "true") return true;
    if (value === "false") return false;
    if (value === "null") return null;
    if (value === "undefined") return undefined;

    if (
      typeof value === "string" &&
      !isNaN(Number(value)) &&
      value.trim() !== ""
    ) {
      return Number(value);
    }

    return value;
  };

  /**
   * ‚öôÔ∏è Convert object params (vd: searchPrams) th√†nh filter object
   * - B·ªè qua c√°c key trong excludeKeys
   * - Convert gi√° tr·ªã string sang ƒë√∫ng ki·ªÉu d·ªØ li·ªáu
   */
  static convertSearchParams = (
    params: Record<string, any>,
    excludeKeys: string[] = []
  ): Record<string, any> => {
    const filter: Record<string, any> = {};

    Object.keys(params).forEach((key) => {
      if (!excludeKeys.includes(key)) {
        const value = TextUtils.parseValue(params[key]);
        if (value !== null && value !== undefined && value !== "") {
          filter[key] = value;
        }
      }
    });

    return filter;
  };
}
